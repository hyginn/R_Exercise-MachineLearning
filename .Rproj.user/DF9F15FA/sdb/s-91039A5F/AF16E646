{
    "collab_server" : "",
    "contents" : "# R_Exercise-MachineLearning.R\n#\n# Purpose:\n#\n# Version: 1.0\n#\n# Date:    2017  02  10\n# Author:  Boris Steipe (boris.steipe@utoronto.ca)\n#\n# V 1.0    First code\n#\n# TODO:\n#    https://rstudio.github.io/tensorflow/\n#    https://www.r-bloggers.com/what-are-the-best-machine-learning-packages-in-r/\n#    https://cran.r-project.org/web/views/MachineLearning.html\n#\n#\n# == HOW TO WORK WITH THIS FILE ================================================\n#\n#  Go through this script line by line to read and understand the\n#  code. Execute code by typing <cmd><enter>. When nothing is\n#  selected, that will execute the current line and move the cursor to\n#  the next line. You can also select more than one line, e.g. to\n#  execute a block of code, or less than one line, e.g. to execute\n#  only the core of a nested expression.\n#\n#  Edit code, as required, experiment with options, or just play.\n#  Especially play.\n#\n#  DO NOT simply source() this whole file!\n#\n#  If there are portions you don't understand, use R's help system,\n#  Google for an answer, or ask me. Don't continue if you don't\n#  understand what's going on. That's not how it works ...\n#\n# ==============================================================================\n\n# ==============================================================================\n#        INTRODUCTION\n# ==============================================================================\n\n# This is a minimal example of using machine learning in R. We work with a well\n# behaved dataset to set up a nicely defined classification problem. This will\n# only serve to get you started in this huge field - but the things we practice\n# here are not entirely trivial and I hope will give you ideas how to move on to\n# tasks that are more interesting.\n\n# The algorithms in the field are now quite powerful, mature and easy to use.\n# However YOU have to contribute two elements, which are not trivial, and\n# without which the approach will fail.\n\n# YOU need to define good features.\n# YOU need to define a good set of examples. Positive/negative - or in your\n#     desired categories.\n\n\n# ==============================================================================\n#      PART ONE: A SIMPLE EXAMPLE WITH CRABS DATA USING THE caret PACKAGE.\n# ==============================================================================\n\n# The crabs dataset is one of the standard multivariate example datasets that\n# ship with R - crabs, collected off Freemantle in West Australia are to be\n# classified based on some morphometric measurements.\n\nlibrary(MASS)\ndata(crabs)\n\nhead(crabs)\n\n# Lets make a combined factor column for species/sex as class labels and put\n# that as the last column:\ncrabs$spsx <- as.factor(paste(crabs[, 1], crabs[, 2],sep=\".\"))\n\nstr(crabs)\n# Two species: blue and orange\n# Two sexes:   female and male\n#\n# Rows   1: 50  blue males\n# Rows  51:100  blue females\n# Rows 101:150  orange males\n# Rows 151:200  orange females\n#\n# FL frontal lobe size (mm)\n# RW rear width (mm)\n# CL carapace length (mm)\n# CW carapace width (mm)\n# BD body depth (mm)\n\n# ==== EXPLORING THE DATA ======================================================\n\nset.seed(112358)\nN <- nrow(crabs)\nrnd <- sample(1:N, N)  # That's just so we don't plot the points in order ...\nplot(crabs[rnd, 4:8], pch=19, cex = 0.5, col=colorCrabs(crabs$spsx[rnd]))\n\n# You get a sense that the data is separable - but in any individual dimension\n# it's hard to do so. The solution in this case is to use Principal Components\n# Analysis (PCA), to remove overall size as a confounding factor ...\n\npcaCrabs <- prcomp(crabs[, 4:8])\nplot(pcaCrabs$x[rnd, 2],\n     pcaCrabs$x[rnd, 3],\n     pch=19, col=colorCrabs(crabs$spsx[rnd]))\n\n\n# ... but that's not the topic of this exercise: it just goes to show that the\n# data is indeed separable in principle, given a proper combination of the\n# individual dimensions that have been measured. Machine learning automates the\n# process of finding the discriminating features, and the thresholds for\n# separation.\n\n\n# ==== MACHINE LEARNING ========================================================\n\n\n# To prepare our table for Machine learning, we drop the first three columns:\ncrabs <- crabs[,-(1:3)]\nhead(crabs)\n\n# It is common for machine learning datasets to have the target categories\n# (class labels) in the last column. Commonly, these are assumed to be factors.\n\n# Can machine learning distinguish the crabs?\n#\n# We will use the caret package, which includes functions for cross-validation\n# and tools for fitting. We load it with the (non-default) option of also\n# loading \"suggested\" packages, which loads many, many packages that are useful\n# for statistical learning and analysis.\n\nif (! require(caret, quietly = TRUE)) {\n    install.packages(\"caret\", dependencies = c(\"Depends\", \"Suggests\"))\n    library(caret)\n}\n\n# Patience ...\n\n# We will randomly remove 20% of each crabs category into a separate\n# \"validation\" dataset. Machine learning operates on training- and test-data to\n# optimize its parameters - but after we have built our models, we would still\n# like to validate whether our prediction also works on completely \"unknown\"\n# data.\n\nset.seed(112358)\nsel <- c(sample(  1:50,  10),\n         sample( 51:100, 10),\n         sample(101:150, 10),\n         sample(151:200, 10))\ncrabsVal <- crabs[sel, ]\ncrabs <- crabs[-sel, ]\nstr(crabs)\n\n\n# Define control parameters:\n# 10-fold cross validation\nmyControl <- trainControl(method=\"cv\", number=10)\n\n# Accuracy: this is our target metric - correctly predicted instances vs. total\n# instances in the test set, in %.\nmyMetric <- \"Accuracy\"\n\n\n# Try a number of \"typical\" Machine Learning algorithms\n\n# === linear algorithms\n#     lda (linear discriminant analysis)\nset.seed(112358)\nfit.lda <- train(spsx~., data=crabs, method=\"lda\",\n                 metric=myMetric, trControl=myControl)\n\n# We produce a number of fit. objects, and compare them all at the end:\n\n# === nonlinear algorithms\n# CART (Classification And Regression Trees)\nset.seed(112358)\nfit.cart <- train(spsx~., data=crabs, method=\"rpart\",\n                  metric=myMetric, trControl=myControl)\n\n# kNN (k-Nearest Neighbours)\nset.seed(112358)\nfit.knn <- train(spsx~., data=crabs, method=\"knn\",\n                 metric=myMetric, trControl=myControl)\n\n# === other algorithms\n# SVM (Support Vector Machine)\nset.seed(112358)\nfit.svm <- train(spsx~., data=crabs, method=\"svmRadial\",\n                 metric=myMetric, trControl=myControl)\n\n# Random Forest (often the \"general purpose\" method of first choice in ML)\nset.seed(112358)\nfit.rf <- train(spsx~., data=crabs, method=\"rf\",\n                metric=myMetric, trControl=myControl)\n\n\n# Neural Network (magic)\nset.seed(112358)\nfit.nnet <- train(spsx~., data=crabs, method=\"nnet\",\n                metric=myMetric, trControl=myControl)\n\n\n# == Evaluate\n# summarize accuracy of models\nmyMLresults <- resamples(list(lda =  fit.lda,\n                              cart = fit.cart,\n                              knn =  fit.knn,\n                              svm =  fit.svm,\n                              rf =   fit.rf,\n                              nnet = fit.nnet))\nsummary(myMLresults)\n\n# The kappa statistic compares observed accuracy with expected accuracy, and\n# thus takes into account that random chance may also give correct\n# classifications. For a gentle, plain-english explanation see:\n# http://stats.stackexchange.com/questions/82162/kappa-statistic-in-plain-english\n\n\ndotplot(myMLresults)\n\n# Linear discriminant analysis performed the best, both regarding accuracy and\n# kappa statistic, with nnet a close second. Which method performs the best is\n# obviously highly dependent on the data - and all of the methods allow\n# optimizations ... this is a pretty big topic overall.\n\n# How well did we do?\nprint(fit.lda)\n\n# How can we use the classifier for predictions on unknown data? Remember that\n# we had \"unknown\" data in our validation dataset. The functions called by caret\n# are set up in similar ways as lm(), nls() or other modeling functions -\n# specifically, they have a predict() method that allows to make predictions on\n# new data with the larned parameters. Since we know the correct category labels\n# in our validation set, we can easily check how often our prediction was right,\n# or wrong: first we make predictions ...\n\nmyPredLDA <- predict(fit.lda, crabsVal)\n\n# ... and then we analyze them in a \"confusion matrix\": predictions vs. known\n# class labels.\nconfusionMatrix(myPredLDA, crabsVal$spsx)\n\n# Not so bad - lda got all the orange crabs correct, and two of the blue ones\n# wrong.\n\nmyPredNnet <- predict(fit.nnet, crabsVal)\nconfusionMatrix(myPredNnet, crabsVal$spsx)\n# ... and nnet (with default parameters!) had only one error more.\n\n\n# ==============================================================================\n#      PART TWO: \"INDUSTRY STRENGTH\" ML WTIH h2o\n# ==============================================================================\n\n# h2o is a large, open platform for data science written in Java. After\n# installing the package, an instance of h2o will run as a server for analysis\n# and allow the R h2o package functions to interact with it. Installation from\n# CRAN should be straightforward - even though the CRAN package has no actual\n# h2o code, the required java \"jar\" file will be downloaded when the h2o.init()\n# function is called for the first time.\n#\n\nif (! require(h2o, quietly = TRUE)) {\n    install.packages(\"h2o\")\n    library(h2o)\n}\n\nH2O <- h2o.init()\n\n# Prepare data again, to be sure ...\ndata(crabs)\ncrabs$spsx <- as.factor(paste(crabs[, 1], crabs[, 2],sep=\".\"))\ncrabs <- crabs[,-(1:3)]\nset.seed(112358)\nsel <- c(sample(  1:50,  10),\n         sample( 51:100, 10),\n         sample(101:150, 10),\n         sample(151:200, 10))\ncrabsVal <- crabs[sel, ]\ncrabs <- crabs[-sel, ]\n\n# Prepare our dataset for h2o in h2o's .hex (hexadecimal) format:\ncrabs.hex <- as.h2o(crabs)\nstr(crabs.hex)\n\n# Let's run a \"Deep Neural Network\" model (cf.\n# https://en.wikipedia.org/wiki/Deep_learning for the concepts and vocabulary,\n# also see http://docs.h2o.ai/h2o/latest-stable/h2o-docs/glossary.html for an\n# h2o glossary) out of the box with all-default parameters:\n( fit.h2o <- h2o.deeplearning(x = 1:5,\n                              y = 6,\n                              training_frame = crabs.hex,\n                              seed = 112358) )\n\n( myH2OPred <- h2o.predict(fit.h2o, as.h2o(crabsVal)) )\nh2o.confusionMatrix(fit.h2o, as.h2o(crabsVal))\n\n# This result is not very impressive - 20/40 errors! h2o separates orange from\n# blue very well but does a terrible job at distinguishing male from female. cf.\n# our lda result:\nconfusionMatrix(myPredictions, crabsVal$spsx)\n# ... with only 2/40 errors.\n\n# Try to improve these results by tuning the parameters: ten-fold\n# cross-validation (default is none), four hidden layers of smaller size\n# (default is c(200, 200)), set activation function to tanh (sigmoidal) (default\n# is \"Rectifier\"), and use LOTS of iterations (default is only 10):\nfit.h2o.2 <- h2o.deeplearning(\n    x = 1:5,\n    y = 6,\n    training_frame = crabs.hex,\n    hidden = c(8, 8, 8, 8),\n    activation = \"Tanh\",\n    seed = 112358,\n    epochs = 10000,\n    nfolds = 10,\n    fold_assignment = \"AUTO\"\n)\nh2o.confusionMatrix(fit.h2o.2, as.h2o(crabsVal))\n\n# Impressively, the result is now much, much better (only 1/40 errors - i.e.\n# twice as good as lda). It's worthwhile to play around with the parameters aned\n# see how they influence processing time and accuracy. You will find that not\n# always will more layers, more nodes, more iterations lead to better results.\n# You can also get a sense that you can burn A LOT of processing power building\n# these models - but the results can also be very, very good. And that's the\n# whole point, after all.\n\n# Before you leave, don't forget to shut down the h2o server instance again, or\n# it will keep on running in the background!\nh2o.shutdown(prompt=FALSE)\n\n\n# ==============================================================================\n#      PART THREE: FEATURES\n# ==============================================================================\n\n# As noted in the introduction, the crabs example contains well behaved data.\n# For much biological data the challenge is that features are categorical, and\n# have huge numbers of states. For example genes, EC classifications, pathway\n# membership, or GO terms. Here are some suggestions to address this:\n\n# If the number of features is large, but their dimensions are real vealued, you\n# can possibly reduce them with PCA. h2o can handle very large networks, but you\n# may want to trade off network size for iterations (epochs).\n\n# Categorical features can be turned into real values by \"dummy coding\". Instead\n# of (male/female), make two features: isMale and isFemale and value them 0 or\n# 1. (h2o actually does this automatically.)\n\n# I would turn large categorical data into features by defining a number of \"reference categories\" - a set of genes, or well distinguished GO terms etc. and then calculating the similarity of my data point of interest to the references. For example, to turn the GO terms associated with TP53 into fatures, calculate the GO semantic similarities for each of the three ontologies to some, say, 50 different genes taken from very different aspects of cellular function, process and component.\n\n# Levels can be combined: e.g. instead of full EC numbers use only the first two digits. Or, for levels of widely different numbers of membership, you can try combining by frequency: group the all the rare ones together, then the intermediate ones, then use the frequent ones as they are.\n\n# If your data is binned into ranges, you can use the mean or median instead.\n\n\n\n# ==== FURTHER READING =========================================================\n\n# https://github.com/h2oai/h2o-tutorials/tree/master/tutorials/deeplearning\n# http://stats.stackexchange.com/questions/95212/improve-classification-with-many-categorical-variables\n#\n\n\n\n# ==============================================================================\n#      BEYOND ...: PROJECTS\n# ==============================================================================\n\n# Try to distinguish Mbp1 target genes from Swi4 target genes - is that\n# possible?\n\n\n\n\n\n\n# [END]\n",
    "created" : 1486779741047.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3252836874",
    "id" : "AF16E646",
    "lastKnownWriteTime" : 1486786751,
    "last_content_update" : 1486786751257,
    "path" : "~/Documents/03.COMPUTING/11-R/R_Exercises/R_Exercise-MachineLearning/R_Exercise-MachineLearning.R",
    "project_path" : "R_Exercise-MachineLearning.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}